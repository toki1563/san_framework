struct pixelIn
{
    float4 pos : SV_POSITION;
    float4 col : COLOR0;
    float2 tx0 : TEXCOORD0;
    float3 nor : TEXCOORD1; // 法線ベクトル
    float3 eye : TEXCOORD2; // 視線ベクトル
};

cbuffer ConstantBuffer
{
    float4x4 WVP; // World*View*Proj
    float4x4 World; // ワールド行列
    float4 LightDir; // 光源方向 (単位ベクトル)
    float4 LightCol; // 光源の色
    float4 LightAmb; // 環境光の色
    float4 CameraPos; // カメラのワールド座標
    float4 Diffuse; // マテリアルの拡散色
    float4 Ambient; // マテリアルの環境光色
    float4 Specular; // マテリアルの鏡面反射特性
}

Texture2D txDiffuse : register(t0);
SamplerState samLinear : register(s0);

float4 main(pixelIn IN) : SV_Target
{
	// カラーとテクスチャの合成
    float4 color = txDiffuse.Sample(samLinear, IN.tx0) * IN.col;

	// フォンシェーディング
    float3 N = normalize(IN.nor);
    float3 H = normalize(LightDir.xyz + normalize(IN.eye)); // ハーフベクトル
    float3 spec = Specular.xyz * pow(max(0, dot(N, H)), Specular.w);

	// スペキュラを合成
    color.xyz += spec;

    return color;
}